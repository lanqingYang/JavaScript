ES6
(2020-11-18)
    1.let关键字 (01-01)
        .1 let声明的变量只在所处的块级有效 ,var不是
        .2 let关键字  防止循环变量变成全局变量  !!! 
        .3 不存在变量提升 (必须先声明再使用)
        .4 暂时性死区特性: let声明的变量和该块级整体进行绑定,不会向上一级去找该变量

    看那个面试题(01-02)!!

    2.const关键字(02)
        .1 声明常量,也具有块级作用域
        .2 必须赋初始值
        .3 赋值后,值(内存地址)不能更改

    3. let,var,const 区别

                  var                    let                    const
              函数级作用域             块级作用域               块级作用域
              变量提升                不存在变量提升            不存在变量提升(必须先声明再使用)
              值可更改                值可更改                  值可更改


    4.!!解构赋值
        按照一定的模式,从数组中或对象中提取值,将提取出来的值赋值给另外的变量

        .1 数组解构
         let [a, b, c, d, e] = [1, 2, 3]; 
         左边的[]代表解构,代表从数组当中提取值,可以直接写变量的名字, 左右一一对应,然后赋值给变量
         解构不成功 变量的值为undefined, 这里的d,e的值就为 undefined

        .2 对象解构
         `变量名和属性名一致时:
            使用变量的名字匹配对象中属性,如果匹配成功,就将对象属性的值赋给变量
            let person = { uname: "zhangsan", age: 21 };
            let { uname, age } = person;

         `变量名和属性名不一样时:
          let person2 = { uname: "lisi", age: 1 };
         // :左边的名字来匹配对象中的属性,属性的值赋给变量名为 :右边的变量
          let { uname: Name, age: Age } = person2;

    5.!!箭头函数(04)
        ()=>{}
        用来简化函数定义语法的:  const fn=()=>{}

      .1 函数体只有一句代码,且执行结果就是返回值,可以省略{}
         const sum = (a, b) => a + b;

      .2 如果形参只有一个,可以忽略小括号
         const fn1 = v => v; 

      .3 !!this指向
         this: 箭头函数不绑定this关键字,箭头函数中的this,指向的是函数定义位置的上下文this
         
         ps:上下文和作用域
         上下文(context)是用来指定代码某些特定部分中this的值。
         作用域(scope) 是指变量的可访问性，上下文(context)是指this在同一作用域内的值。
         我们也可以使用call()、apply()、bind()、箭头函数等改变上下文。
         在浏览器中在全局作用域(scope)中上下文中始终是Window对象。
         在Node.js中在全局作用域(scope)中上下文中始终是Global 对象。
    
        看看(04)里面的面试题!  对象不能产生作用域!


    6.剩余参数
        .1 剩余参数:  函数 实参个数>形参个数时 ,剩下的实参个数就是
        .2 剩余参数语法允许我们将一个不定数量的参数表示为一个数组  
            const sum = (first,...args) => { 
            //...args 代表剩余的实参它都接受了 args是个数组
            console.log(first); //10
            console.log(args); //[2,30,23]
             }
            sum(10, 2, 40, 23);  

    
        与解构配合使用
        //数组解构与剩余参数  (对象同理)
        let student = ["tanghao", "lanqing", "dudu"];
        let [s1, ...s2] = student;
        console.log(s1); //'tanghao'
        console.log(s2); //['lanqing','dudu']

(2020-11-20)
    7.扩展运算符 (正好与剩余参数相反，可以对比起来看)
        将数组或者对象用逗号分割的参数序列
        let arr = [1, 2, 3];
        console.log(...arr); //1 2 3(‘,’ 被当作console.log的参数分隔符了，所以不输出 ‘，’ )

         运用： .1 合并数组      
                    `方法一: let arr3 = [...arr1, ...arr2];
                    `方法二： let arr3=arr1.push(...arr2);
                .2 将伪数组转换为真数组 
                    [...divs]  //divs是一个伪数组 ， 在...divs 外面包裹[]即可
    
    8.!!Array的扩展方法!!
        .1 Array.from(伪数组[,callback])  将伪数组转换为真数组，callback类似于数组的map()方法
        .2 find() 找出第一个符合条件的数组成员，没有返回undefined
        .3 findIndex() 找出第一个符合条件的数组成员的位置，没有返回-1
        .4 includes()  数组中是否包含给定值，返回布尔值

    9.!!模板字符串 
          !!模板字符串： 新增字符串的方式，使用反引号定义。   
        作用：  1. 可以解析变量 ${变量名}
                2. 模板字符串中可以换行
                3. 可以调用函数，返回的函数的返回值
    
    10.String的扩展方法
        .1 startsWith(): 参数字符是否在原字符串  头部 ， 返回布尔值
        .2 endsWith(): ~ 尾部，~
        .3 repeat(n): 字符串重复n次

    11.Set 数据结构
        Set:
            .1创建set数据
            const s = new Set();
            Set函数可以接收一个数组作为参数，用来初始化。
             const set = new Set([1, 2, 3, 4, 4]); //这里的重复4会值算一个

             .2做数组去重
             const set = new Set(数组); //这里的重复值会被忽略
             var arr=[...set] //扩展，Set转变为数组 


        Set中的方法： 
            .1 add(value): 添加，返回Set结构本身
            .2 delete(value): 删除，返回布尔值
            .3 has(value): 返回布尔值，表示该值是否是Set成员
            .4 clear(): 清除所有成员，没有返回值

            .5 遍历 forEach(callback) 没有返回值 不提供索引（回调函数中没有 index这个参数）

    12. for..of 与 for..in区别
       .1 for...in循环遍历的是数组的键值(索引)，而for...of循环遍历的是数组的值。
       .2 for...in 会遍历自定义属性，for...of不会  (自己在后面添加的属性  arr=[1,2]  arr.name='数组')
       .3 for...of 不遍历对象 for...in 要遍历对象
